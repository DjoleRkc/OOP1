/*Написати на језику C++ следеће класе (класе опремити оним конструкторима, деструктором и
операторима доделе који су потребни за безбедно и ефикасно коришћење класа):
• Сличица има број, назив и јединствени аутоматски генерисан целобројни индентификатор. Број и
назив сличице се задају при стварању. Сви подаци могу да се дохвате. Стварање нове сличице могуће
је само у штампарији. Није могуће направити копију сличице. Могуће је исписати сличицу у излазни
ток (it<<slicica) у облику Slicica broj - naziv (id).
• Штампарија се ствара са низом назива свих различитих сличица и бројем назива у низу. Могуће је
одштампати нову сличицу на основу задатог броја сличице, тако што се створи и врати сличица са
задатим бројем и именом које се дохвата са позиције која одговара броју сличице у низу назива
сличица. Уколико сличица са задатим бројем не постоји, вратити нулту вредност. Могуће је
дохватити укупан број различитих сличица. Није могуће направити копију штампарије.
• Шпил садржи произвољан број сличица. Ствара се празан, након чега се сличице појединачно додају
(spil+=slicica). Могуће је проверити да ли се у шпилу налази сличица са задатим бројем
(spil%broj). Могуће је текућу позицију у шпилу поставити на место прве сличице и померити је на
наредно место у шпилу. Могуће је проверити да ли се на текућој позицији налази сличица или се
дошло до краја шпила, као и дохватити сличицу са тренутне позиције. Из шпила је могуће извадити
сличицу са задатим бројем. Није могуће направити копију шпила. Могуће је исписати шпил у излазни
ток (it<<spil) тако што се свака сличица испише у засебном реду.
Написати главну функцију која детаљно тестира функционалности претходно описаних класа.
*/
#include <string>
#include <iostream>
#include <ostream>
#include "slicica.h"
#include "stamparija.h"
#include "spil.h"
using namespace std;

int Slicica::i = 1;
int main() {
	Stamparija st(new string[3]{ "Pera", "Mika", "Zika" }, 3);
	Slicica* s1 = st.makeSlicica(0);
	Slicica* s2 = st.makeSlicica(1);
	Slicica* s3 = st.makeSlicica(2);
	Spil sp;
	sp += s1;
	sp += s2;
	sp += s3;
	cout << sp << endl;
	sp.setCurrent();
	while (!sp.isEnd()) {
		cout << *sp.getCurrent()<< endl;
		sp.moveCurrent();
	}
	sp.removeSlicica(2);
	cout <<endl<< sp << endl;
	cout<< sp % 2<<endl;
	cout << sp % 1;
}
